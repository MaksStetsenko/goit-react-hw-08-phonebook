{"version":3,"file":"static/js/852.7b38fdc5.chunk.js","mappings":"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","sources":["components/Modal/Modal.jsx","components/Filter/Filter.styled.jsx","components/Filter/Filter.jsx","components/hooks/useFilteredContacts.js","components/ContactForm/ContactForm.jsx","Pages/Contacts.jsx","components/Form/Form.jsx","redux/filter/filter.selectors.js"],"sourcesContent":["import React, { useState } from 'react';\nimport Button from '@mui/material/Button';\nimport TextField from '@mui/material/TextField';\nimport Dialog from '@mui/material/Dialog';\nimport DialogActions from '@mui/material/DialogActions';\nimport DialogContent from '@mui/material/DialogContent';\nimport DialogContentText from '@mui/material/DialogContentText';\nimport DialogTitle from '@mui/material/DialogTitle';\nimport { IconButton } from '@mui/material';\nimport PropTypes from 'prop-types';\nimport Form from 'components/Form';\nimport { useForm } from 'react-hook-form';\nimport { messages } from 'components/settings';\nimport { toast } from 'react-toastify';\nimport { LocalSpiner } from 'components/Spiner/Spiner';\nfunction Modal({\n  title,\n  submitButtonName,\n  icon,\n  user = { name: '', number: '' },\n  allUsers = [],\n  submitForm,\n  isLoading,\n}) {\n  const [open, setOpen] = useState(false);\n  const [activeUser, setActiveUser] = useState(user);\n  const [allUsersArr, setAllUsersArr] = useState(allUsers);\n\n  const {\n    register,\n    handleSubmit,\n    formState: { errors },\n    reset,\n  } = useForm();\n\n  const handleClickOpen = e => {\n    setOpen(true);\n    setActiveUser(user);\n    setAllUsersArr(allUsers);\n  };\n\n  const handleClose = () => {\n    setOpen(false);\n    reset();\n  };\n\n  const onSubmit = data => {\n    if (isContactExist(data.name)) {\n      toast.error(messages.userIsExist);\n      return;\n    }\n\n    const sendData = user.id ? { id: user.id, credentials: data } : data;\n    submitForm(sendData);\n\n    reset();\n    setOpen(false);\n  };\n\n  const handleChange = e => {\n    setActiveUser({ ...activeUser, [e.target.name]: e.target.value });\n  };\n\n  const isContactExist = abonentName => {\n    return allUsersArr.find(({ name }) => name === abonentName);\n  };\n\n  return (\n    <div>\n      {isLoading ? (\n        <LocalSpiner />\n      ) : (\n        <IconButton onClick={handleClickOpen}>{icon}</IconButton>\n      )}\n      <Dialog open={open} fullWidth={true} onClose={handleClose}>\n        <Form autoComplete=\"on\" noValidate onSubmit={handleSubmit(onSubmit)}>\n          <DialogTitle>{title}</DialogTitle>\n          <DialogContent>\n            <DialogContentText>\n              Attention! All fields are required!\n            </DialogContentText>\n            <TextField\n              required\n              autoFocus\n              margin=\"dense\"\n              id=\"name\"\n              label=\"User name\"\n              type=\"text\"\n              fullWidth={true}\n              variant=\"standard\"\n              {...register('name', {\n                required: {\n                  value: true,\n                  message: messages.isRequired,\n                },\n              })}\n              error={!!errors.name}\n              helperText={errors.name?.message}\n              onChange={handleChange}\n              value={activeUser?.name}\n            />\n\n            <TextField\n              required\n              margin=\"dense\"\n              id=\"number\"\n              label=\"Phone number\"\n              type=\"tel\"\n              fullWidth={true}\n              variant=\"standard\"\n              {...register('number', {\n                required: {\n                  value: true,\n                  message: messages.isRequired,\n                },\n                pattern: {\n                  value: /^(\\s*)?(\\+)?([- _():=+]?\\d[- _():=+]?){10,14}(\\s*)?$/,\n                  message: messages.wrongInput,\n                },\n              })}\n              error={!!errors.number}\n              helperText={errors.number?.message}\n              onChange={handleChange}\n              value={activeUser?.number}\n            />\n          </DialogContent>\n          <DialogActions>\n            <Button onClick={handleClose}>Cancel</Button>\n            <Button type=\"submit\" onClick={handleSubmit(onSubmit)}>\n              {submitButtonName}\n            </Button>\n          </DialogActions>\n        </Form>\n      </Dialog>\n    </div>\n  );\n}\n\nModal.propTypes = {\n  title: PropTypes.string.isRequired,\n  submitButtonName: PropTypes.string.isRequired,\n  user: PropTypes.shape({\n    id: PropTypes.string,\n    name: PropTypes.string,\n    number: PropTypes.string,\n  }),\n  icon: PropTypes.element.isRequired,\n  allUsers: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string,\n      name: PropTypes.string,\n      number: PropTypes.string,\n    })\n  ),\n};\n\nexport default Modal;\n","import { styled, alpha } from '@mui/material/styles';\nimport InputBase from '@mui/material/InputBase';\n\nexport const Search = styled('div')(({ theme }) => ({\n  position: 'relative',\n  borderRadius: theme.shape.borderRadius,\n  backgroundColor: alpha(theme.palette.common.white, 0.15),\n  '&:hover': {\n    backgroundColor: alpha(theme.palette.common.white, 0.25),\n  },\n  marginLeft: 0,\n  width: '100%',\n  [theme.breakpoints.up('sm')]: {\n    marginLeft: theme.spacing(1),\n    width: 'auto',\n  },\n}));\n\nexport const SearchIconWrapper = styled('div')(({ theme }) => ({\n  padding: theme.spacing(0, 2),\n  height: '100%',\n  position: 'absolute',\n  pointerEvents: 'none',\n  display: 'flex',\n  alignItems: 'center',\n  justifyContent: 'center',\n}));\n\nexport const StyledInputBase = styled(InputBase)(({ theme }) => ({\n  color: 'inherit',\n  '& .MuiInputBase-input': {\n    padding: theme.spacing(1, 1, 1, 0),\n    paddingLeft: `calc(1em + ${theme.spacing(4)})`,\n    transition: theme.transitions.create('width'),\n    width: '100%',\n    [theme.breakpoints.up('sm')]: {\n      width: '12ch',\n      '&:focus': {\n        width: '20ch',\n      },\n    },\n  },\n}));\n","import React from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\nimport PropTypes from 'prop-types';\n\nimport { inputFilterReducer } from '../../redux/filter/filterSlice';\nimport { sellectFilter } from '../../redux/filter/filter.selectors';\nimport SearchIcon from '@mui/icons-material/Search';\n\nimport { Search, SearchIconWrapper, StyledInputBase } from './Filter.styled';\n\nconst Filter = () => {\n  const dispatch = useDispatch();\n\n  const filter = useSelector(sellectFilter);\n\n  const handleChangeFilter = event => {\n    dispatch(inputFilterReducer(event.currentTarget.value));\n  };\n\n  return (\n    <Search>\n      <SearchIconWrapper>\n        <SearchIcon />\n      </SearchIconWrapper>\n      <StyledInputBase\n        placeholder=\"Search…\"\n        inputProps={{ 'aria-label': 'search' }}\n        value={filter}\n        onChange={handleChangeFilter}\n      />\n    </Search>\n  );\n};\n\nexport default Filter;\n\nFilter.propTypes = {\n  filter: PropTypes.element,\n  onChange: PropTypes.func,\n  clearFilter: PropTypes.func,\n};\n","const { useSelector } = require('react-redux');\nconst { useGetContactQuery } = require('redux/contacts/contacts');\nconst { sellectFilter } = require('redux/filter/filter.selectors');\n\nexport const useFilteredContacts = () => {\n  const { data: contacts = [], error, isLoading } = useGetContactQuery();\n  const filter = useSelector(sellectFilter);\n  const filterNormalized = filter.toLowerCase();\n  const filteredContacts = contacts.filter(({ name }) =>\n    name.toLowerCase().includes(filterNormalized)\n  );\n  return { filteredContacts, contacts, options: { error, isLoading } };\n};\n","import * as React from 'react';\nimport PropTypes from 'prop-types';\nimport Box from '@mui/material/Box';\nimport Table from '@mui/material/Table';\nimport TableBody from '@mui/material/TableBody';\nimport TableCell from '@mui/material/TableCell';\nimport TableContainer from '@mui/material/TableContainer';\nimport TableHead from '@mui/material/TableHead';\nimport TablePagination from '@mui/material/TablePagination';\nimport TableRow from '@mui/material/TableRow';\nimport TableSortLabel from '@mui/material/TableSortLabel';\nimport Toolbar from '@mui/material/Toolbar';\nimport Typography from '@mui/material/Typography';\nimport Paper from '@mui/material/Paper';\nimport IconButton from '@mui/material/IconButton';\nimport DeleteIcon from '@mui/icons-material/Delete';\nimport { visuallyHidden } from '@mui/utils';\nimport Modal from 'components/Modal/Modal';\nimport ControlPointIcon from '@mui/icons-material/ControlPoint';\nimport Filter from 'components/Filter';\n\nimport {\n  useAddContactMutation,\n  useDeleteContactMutation,\n} from 'redux/contacts/contacts';\nimport { useFilteredContacts } from 'components/hooks/useFilteredContacts';\n\nfunction descendingComparator(a, b, orderBy) {\n  if (b[orderBy] < a[orderBy]) {\n    return -1;\n  }\n  if (b[orderBy] > a[orderBy]) {\n    return 1;\n  }\n  return 0;\n}\n\nfunction getComparator(order, orderBy) {\n  return order === 'desc'\n    ? (a, b) => descendingComparator(a, b, orderBy)\n    : (a, b) => -descendingComparator(a, b, orderBy);\n}\n\nfunction stableSort(array, comparator) {\n  const stabilizedThis = array.map((el, index) => [el, index]);\n  stabilizedThis.sort((a, b) => {\n    const order = comparator(a[0], b[0]);\n    if (order !== 0) {\n      return order;\n    }\n    return a[1] - b[1];\n  });\n  return stabilizedThis.map(el => el[0]);\n}\n\nconst headCells = [\n  {\n    id: 'id',\n    numeric: true,\n    disablePadding: false,\n    label: 'N',\n  },\n  {\n    id: 'name',\n    numeric: false,\n    disablePadding: false,\n    label: 'User name',\n  },\n  {\n    id: 'number',\n    numeric: true,\n    disablePadding: false,\n    label: 'Phone number',\n  },\n\n  {\n    id: 'deleteContact',\n    numeric: true,\n    disablePadding: false,\n    label: 'Delete contact',\n  },\n];\n\nfunction EnhancedTableHead(props) {\n  const { order, orderBy, onRequestSort } = props;\n\n  const createSortHandler = property => event => {\n    onRequestSort(event, property);\n  };\n\n  return (\n    <TableHead>\n      <TableRow>\n        {headCells.map(headCell => (\n          <TableCell\n            key={headCell.id}\n            align={headCell.numeric ? 'right' : 'left'}\n            padding={headCell.disablePadding ? 'none' : 'normal'}\n            sortDirection={orderBy === headCell.id ? order : false}\n          >\n            <TableSortLabel\n              active={orderBy === headCell.id}\n              direction={orderBy === headCell.id ? order : 'asc'}\n              onClick={createSortHandler(headCell.id)}\n            >\n              {headCell.label}\n              {orderBy === headCell.id ? (\n                <Box component=\"span\" sx={visuallyHidden}>\n                  {order === 'desc' ? 'sorted descending' : 'sorted ascending'}\n                </Box>\n              ) : null}\n            </TableSortLabel>\n          </TableCell>\n        ))}\n      </TableRow>\n    </TableHead>\n  );\n}\n\nEnhancedTableHead.propTypes = {\n  onRequestSort: PropTypes.func.isRequired,\n  order: PropTypes.oneOf(['asc', 'desc']).isRequired,\n  orderBy: PropTypes.string.isRequired,\n};\n\nfunction EnhancedTableToolbar(props) {\n  const { contactsCount, allUsersArray } = props;\n  const [addContact, { isLoading: addContactIsLoading }] =\n    useAddContactMutation();\n\n  return (\n    <Toolbar>\n      <Typography\n        sx={{ flex: '1 1 100%' }}\n        variant=\"h6\"\n        id=\"tableTitle\"\n        component=\"div\"\n      >\n        Contacts [{contactsCount}]\n      </Typography>\n      {contactsCount !== 0 && <Filter />}\n\n      <Modal\n        title=\"Add new contact\"\n        submitButtonName=\"Add contact\"\n        icon={<ControlPointIcon fontSize=\"large\" />}\n        allUsers={allUsersArray}\n        submitForm={addContact}\n        isLoading={addContactIsLoading}\n      />\n    </Toolbar>\n  );\n}\n\nEnhancedTableToolbar.propTypes = {\n  contactsCount: PropTypes.number.isRequired,\n  allUsersArray: PropTypes.arrayOf(\n    PropTypes.shape({\n      id: PropTypes.string.isRequired,\n      name: PropTypes.string.isRequired,\n      number: PropTypes.string.isRequired,\n    })\n  ),\n};\n\nexport default function ContactsTable() {\n  const [order, setOrder] = React.useState('asc');\n  const [orderBy, setOrderBy] = React.useState('name');\n  const [page, setPage] = React.useState(0);\n  const [rowsPerPage, setRowsPerPage] = React.useState(5);\n  const [deleteById, { isLoading }] = useDeleteContactMutation();\n  const { filteredContacts, contacts } = useFilteredContacts();\n\n  const handleRequestSort = (event, property) => {\n    const isAsc = orderBy === property && order === 'asc';\n    setOrder(isAsc ? 'desc' : 'asc');\n    setOrderBy(property);\n  };\n\n  const handleChangePage = (event, newPage) => {\n    setPage(newPage);\n  };\n\n  const handleChangeRowsPerPage = event => {\n    setRowsPerPage(parseInt(event.target.value, 10));\n    setPage(0);\n  };\n\n  const handleDelete = id => {\n    if (isLoading) {\n      return;\n    }\n    deleteById(id);\n  };\n\n  // Avoid a layout jump when reaching the last page with empty rows.\n  const emptyRows =\n    page > 0\n      ? Math.max(0, (1 + page) * rowsPerPage - filteredContacts.length)\n      : 0;\n\n  return (\n    <Box sx={{ width: '100%' }}>\n      <Paper sx={{ width: '100%', mb: 2 }}>\n        <EnhancedTableToolbar\n          contactsCount={contacts.length}\n          allUsersArray={contacts}\n        />\n        <TableContainer>\n          <Table\n            sx={{ minWidth: 750 }}\n            aria-labelledby=\"tableTitle\"\n            size={'medium'}\n          >\n            <EnhancedTableHead\n              order={order}\n              orderBy={orderBy}\n              onRequestSort={handleRequestSort}\n              rowCount={contacts.length}\n            />\n            {filteredContacts.length !== 0 && (\n              <TableBody>\n                {stableSort(filteredContacts, getComparator(order, orderBy))\n                  .slice(page * rowsPerPage, page * rowsPerPage + rowsPerPage)\n                  .map((row, index, array) => {\n                    const labelId = `enhanced-table-checkbox-${index}`;\n                    const numberByOrder = index + 1;\n\n                    return (\n                      <TableRow\n                        hover\n                        role=\"checkbox\"\n                        tabIndex={-1}\n                        key={row.id}\n                      >\n                        <TableCell\n                          component=\"th\"\n                          id={labelId}\n                          scope=\"row\"\n                          padding=\"normal\"\n                          align=\"right\"\n                          width={40}\n                        >\n                          {numberByOrder}\n                        </TableCell>\n                        <TableCell align=\"left\">{row.name}</TableCell>\n                        <TableCell align=\"right\">{row.number}</TableCell>\n                        <TableCell align=\"right\">\n                          <IconButton onClick={() => handleDelete(row.id)}>\n                            <DeleteIcon />\n                          </IconButton>\n                        </TableCell>\n                      </TableRow>\n                    );\n                  })}\n                {emptyRows > 0 && (\n                  <TableRow\n                    style={{\n                      height: 53 * emptyRows,\n                    }}\n                  >\n                    <TableCell colSpan={6} />\n                  </TableRow>\n                )}\n              </TableBody>\n            )}\n          </Table>\n        </TableContainer>\n        {filteredContacts.length === 0 ? (\n          <Box\n            sx={{\n              width: '100%',\n              p: 2,\n              display: 'flex',\n              alignItems: 'center',\n              justifyContent: 'center',\n            }}\n          >\n            The phonebook is empty\n          </Box>\n        ) : (\n          <TablePagination\n            rowsPerPageOptions={[5, 10, 25]}\n            component=\"div\"\n            count={filteredContacts.length}\n            rowsPerPage={rowsPerPage}\n            page={page}\n            onPageChange={handleChangePage}\n            onRowsPerPageChange={handleChangeRowsPerPage}\n          />\n        )}\n      </Paper>\n    </Box>\n  );\n}\n","import React from 'react';\nimport ContactForm from 'components/ContactForm';\nimport Section from 'components/Section';\n\nconst Contacts = () => {\n  return (\n    <Section>\n      <ContactForm />\n    </Section>\n  );\n};\n\nexport default Contacts;\n","import { Box } from 'components/Box';\nimport React from 'react';\nimport PropTypes from 'prop-types';\n\nconst Form = ({ children, autoComplete, onSubmit }) => {\n  return (\n    <form onSubmit={onSubmit} autoComplete={autoComplete}>\n      <Box display=\"flex\" flexDirection=\"column\" gridGap={4}>\n        {children}\n      </Box>\n    </form>\n  );\n};\n\nForm.propTypes = {\n  children: PropTypes.any.isRequired,\n  autoComplete: PropTypes.string,\n  onSubmit: PropTypes.func,\n};\n\nexport default Form;\n","export const sellectFilter = state => state.filter;\n"],"names":["title","submitButtonName","icon","user","name","number","allUsers","submitForm","isLoading","useState","open","setOpen","activeUser","setActiveUser","allUsersArr","setAllUsersArr","useForm","register","handleSubmit","errors","formState","reset","handleClose","onSubmit","data","isContactExist","toast","messages","sendData","id","credentials","handleChange","e","target","value","abonentName","find","IconButton","onClick","Dialog","fullWidth","onClose","Form","autoComplete","noValidate","DialogTitle","DialogContent","DialogContentText","TextField","required","autoFocus","margin","label","type","variant","message","error","helperText","onChange","pattern","DialogActions","Button","Search","styled","theme","position","borderRadius","shape","backgroundColor","alpha","palette","common","white","marginLeft","width","breakpoints","up","spacing","SearchIconWrapper","padding","height","pointerEvents","display","alignItems","justifyContent","StyledInputBase","InputBase","color","paddingLeft","transition","transitions","create","dispatch","useDispatch","filter","useSelector","sellectFilter","placeholder","inputProps","event","inputFilterReducer","currentTarget","require","useGetContactQuery","descendingComparator","a","b","orderBy","getComparator","order","stableSort","array","comparator","stabilizedThis","map","el","index","sort","headCells","numeric","disablePadding","EnhancedTableHead","props","onRequestSort","TableHead","TableRow","headCell","TableCell","align","sortDirection","TableSortLabel","active","direction","property","Box","component","sx","visuallyHidden","EnhancedTableToolbar","contactsCount","allUsersArray","useAddContactMutation","addContact","addContactIsLoading","Toolbar","Typography","flex","ControlPoint","fontSize","ContactsTable","React","setOrder","setOrderBy","page","setPage","rowsPerPage","setRowsPerPage","useDeleteContactMutation","deleteById","contacts","filterNormalized","toLowerCase","filteredContacts","includes","options","useFilteredContacts","emptyRows","Math","max","length","Paper","mb","TableContainer","Table","minWidth","size","rowCount","TableBody","slice","row","labelId","numberByOrder","hover","role","tabIndex","scope","Delete","style","colSpan","p","TablePagination","rowsPerPageOptions","count","onPageChange","newPage","onRowsPerPageChange","parseInt","Section","children","flexDirection","gridGap","state"],"sourceRoot":""}